{
  "version": "3.2",
  "log": [
    {
      "WETH": {
        "src": "contracts\\libs\\weth.sol:5",
        "version": {
          "withMetadata": "5ce36234c2ba97b1c7c8bc318cfbcf91cebc259b44c09708a7760f20d04e6602",
          "withoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6",
          "linkedWithoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\libs\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\libs\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\libs\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:6"
            },
            {
              "contract": "WETH",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:7"
            },
            {
              "contract": "WETH",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\weth.sol:8"
            },
            {
              "contract": "WETH",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\weth.sol:15"
            },
            {
              "contract": "WETH",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathInt": {
        "src": "contracts\\libs\\SafeMathInt.sol:5",
        "version": {
          "withMetadata": "c059f1da2e21372642dcb69e3ded67e6ffa3c234007e51b6ef8e767fa4219142",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MinterRole": {
        "src": "contracts\\libs\\MinterRole.sol:7",
        "version": {
          "withMetadata": "c28ac9d7c5fbef45150f9d265584a657425c830e9b826f51cdca4cbf6b09fb5c",
          "withoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423",
          "linkedWithoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "()",
          "isMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts\\libs\\MinterRole.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)100_storage",
              "src": "contracts\\libs\\MinterRole.sol:13"
            }
          ],
          "types": {
            "t_struct(Role)100_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts\\libs\\Roles.sol:5",
        "version": {
          "withMetadata": "05087cb998faa832b75672ffc2428715309cb73c0c86a083f28d1033cd24899f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "70ed42560f0ec6262eed6aaf05cd563b1bb9a6e7f82914942939c44c443c7037",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "eef4e1ed22a62a2ae8042e185d153f55a0216ad0a32fb0825a9b64954b060414",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "contracts\\libs\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "6d1e151ab6957ea4930a311944d9e4a5bcbf1e2d6117a6b2046274b102e8da7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\libs\\SafeMath.sol:8",
        "version": {
          "withMetadata": "c8c77fc9f7d8bc79210dac6597ce01d3b4518356d3e43d84692784ec6073e1b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StableMath": {
        "src": "contracts\\libs\\StableMath.sol:6",
        "version": {
          "withMetadata": "f6fcdb7e989c6719d0d9d322baae500756a80ec37c8661c20ce1a389c0ec2cdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "3e8a418eb8e30a469f592feb38747b69018b7f48b96a87ada68530b2f917e883",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "34689a352d76424ae3bb802d67b295f14d26efd483a5b8e6a7ec4295ad9f42cb",
          "withoutMetadata": "63b75bdfecbf34275c2d6f96b698d304b18864daf2209f331d5abea64f15fbaa",
          "linkedWithoutMetadata": "63b75bdfecbf34275c2d6f96b698d304b18864daf2209f331d5abea64f15fbaa"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\libs\\ERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\libs\\ERC20.sol:156",
        "version": {
          "withMetadata": "8a4a3169fd22d8a2f2e3701cd189bd4656d9f773df1f8c62a233f11ac5eaa6e0",
          "withoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13",
          "linkedWithoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\libs\\ERC20.sol:173"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_totalSupply",
            "src": "contracts\\libs\\ERC20.sol:168"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\ERC20.sol:169"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\ERC20.sol:164"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\ERC20.sol:166"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\ERC20.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20.sol:169"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\ERC20.sol:20",
        "version": {
          "withMetadata": "5c57f36085cfaf6ea69a729eccd7cc60139672d2ec400f2454aafa87a6921e67",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH": {
        "src": "contracts\\libs\\weth.sol:5",
        "version": {
          "withMetadata": "5ce36234c2ba97b1c7c8bc318cfbcf91cebc259b44c09708a7760f20d04e6602",
          "withoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6",
          "linkedWithoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\libs\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\libs\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\libs\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:6"
            },
            {
              "contract": "WETH",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:7"
            },
            {
              "contract": "WETH",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\weth.sol:8"
            },
            {
              "contract": "WETH",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\weth.sol:15"
            },
            {
              "contract": "WETH",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathInt": {
        "src": "contracts\\libs\\SafeMathInt.sol:5",
        "version": {
          "withMetadata": "c059f1da2e21372642dcb69e3ded67e6ffa3c234007e51b6ef8e767fa4219142",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MinterRole": {
        "src": "contracts\\libs\\MinterRole.sol:7",
        "version": {
          "withMetadata": "c28ac9d7c5fbef45150f9d265584a657425c830e9b826f51cdca4cbf6b09fb5c",
          "withoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423",
          "linkedWithoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "()",
          "isMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts\\libs\\MinterRole.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)100_storage",
              "src": "contracts\\libs\\MinterRole.sol:13"
            }
          ],
          "types": {
            "t_struct(Role)100_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts\\libs\\Roles.sol:5",
        "version": {
          "withMetadata": "05087cb998faa832b75672ffc2428715309cb73c0c86a083f28d1033cd24899f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "70ed42560f0ec6262eed6aaf05cd563b1bb9a6e7f82914942939c44c443c7037",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "eef4e1ed22a62a2ae8042e185d153f55a0216ad0a32fb0825a9b64954b060414",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "contracts\\libs\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "6d1e151ab6957ea4930a311944d9e4a5bcbf1e2d6117a6b2046274b102e8da7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\libs\\SafeMath.sol:8",
        "version": {
          "withMetadata": "c8c77fc9f7d8bc79210dac6597ce01d3b4518356d3e43d84692784ec6073e1b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StableMath": {
        "src": "contracts\\libs\\StableMath.sol:6",
        "version": {
          "withMetadata": "f6fcdb7e989c6719d0d9d322baae500756a80ec37c8661c20ce1a389c0ec2cdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "3e8a418eb8e30a469f592feb38747b69018b7f48b96a87ada68530b2f917e883",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "34689a352d76424ae3bb802d67b295f14d26efd483a5b8e6a7ec4295ad9f42cb",
          "withoutMetadata": "63b75bdfecbf34275c2d6f96b698d304b18864daf2209f331d5abea64f15fbaa",
          "linkedWithoutMetadata": "63b75bdfecbf34275c2d6f96b698d304b18864daf2209f331d5abea64f15fbaa"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\libs\\ERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\libs\\ERC20.sol:156",
        "version": {
          "withMetadata": "8a4a3169fd22d8a2f2e3701cd189bd4656d9f773df1f8c62a233f11ac5eaa6e0",
          "withoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13",
          "linkedWithoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\libs\\ERC20.sol:173"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_totalSupply",
            "src": "contracts\\libs\\ERC20.sol:168"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\ERC20.sol:169"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\ERC20.sol:164"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\ERC20.sol:166"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\ERC20.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20.sol:169"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\ERC20.sol:20",
        "version": {
          "withMetadata": "5c57f36085cfaf6ea69a729eccd7cc60139672d2ec400f2454aafa87a6921e67",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "aad431cf1cc6c4d374dae17ba80d7e6238d35ba4510f297283822a533e0d980e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "20df9b2bf0017312b7d89aeb9e8ab405a450c45de18d0f89e983425b5a09d9b5",
          "withoutMetadata": "ae1fd26730e1c566a6ec5ba51f56ac13d7fad622d69c8d6eb75af96c1b26b78a",
          "linkedWithoutMetadata": "ae1fd26730e1c566a6ec5ba51f56ac13d7fad622d69c8d6eb75af96c1b26b78a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "aad431cf1cc6c4d374dae17ba80d7e6238d35ba4510f297283822a533e0d980e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "20df9b2bf0017312b7d89aeb9e8ab405a450c45de18d0f89e983425b5a09d9b5",
          "withoutMetadata": "ae1fd26730e1c566a6ec5ba51f56ac13d7fad622d69c8d6eb75af96c1b26b78a",
          "linkedWithoutMetadata": "ae1fd26730e1c566a6ec5ba51f56ac13d7fad622d69c8d6eb75af96c1b26b78a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "aad431cf1cc6c4d374dae17ba80d7e6238d35ba4510f297283822a533e0d980e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "20df9b2bf0017312b7d89aeb9e8ab405a450c45de18d0f89e983425b5a09d9b5",
          "withoutMetadata": "ae1fd26730e1c566a6ec5ba51f56ac13d7fad622d69c8d6eb75af96c1b26b78a",
          "linkedWithoutMetadata": "ae1fd26730e1c566a6ec5ba51f56ac13d7fad622d69c8d6eb75af96c1b26b78a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "aad431cf1cc6c4d374dae17ba80d7e6238d35ba4510f297283822a533e0d980e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "20df9b2bf0017312b7d89aeb9e8ab405a450c45de18d0f89e983425b5a09d9b5",
          "withoutMetadata": "ae1fd26730e1c566a6ec5ba51f56ac13d7fad622d69c8d6eb75af96c1b26b78a",
          "linkedWithoutMetadata": "ae1fd26730e1c566a6ec5ba51f56ac13d7fad622d69c8d6eb75af96c1b26b78a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "b4149707d31eda2048bfa9e16616459d7c1f153b445360dfb31c05686e1e3d8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "7e8daaf905f9b43cb698a451100594f263956519ea5b275de82fc050239cc9d4",
          "withoutMetadata": "d7db439e1096a15e5b1e1d1fe17e714ebdb695bba5b405520f8af6a34f406351",
          "linkedWithoutMetadata": "d7db439e1096a15e5b1e1d1fe17e714ebdb695bba5b405520f8af6a34f406351"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH": {
        "src": "contracts\\libs\\weth.sol:5",
        "version": {
          "withMetadata": "5ce36234c2ba97b1c7c8bc318cfbcf91cebc259b44c09708a7760f20d04e6602",
          "withoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6",
          "linkedWithoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\libs\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\libs\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\libs\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:6"
            },
            {
              "contract": "WETH",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:7"
            },
            {
              "contract": "WETH",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\weth.sol:8"
            },
            {
              "contract": "WETH",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\weth.sol:15"
            },
            {
              "contract": "WETH",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathInt": {
        "src": "contracts\\libs\\SafeMathInt.sol:5",
        "version": {
          "withMetadata": "c059f1da2e21372642dcb69e3ded67e6ffa3c234007e51b6ef8e767fa4219142",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MinterRole": {
        "src": "contracts\\libs\\MinterRole.sol:7",
        "version": {
          "withMetadata": "c28ac9d7c5fbef45150f9d265584a657425c830e9b826f51cdca4cbf6b09fb5c",
          "withoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423",
          "linkedWithoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "()",
          "isMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts\\libs\\MinterRole.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)100_storage",
              "src": "contracts\\libs\\MinterRole.sol:13"
            }
          ],
          "types": {
            "t_struct(Role)100_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts\\libs\\Roles.sol:5",
        "version": {
          "withMetadata": "05087cb998faa832b75672ffc2428715309cb73c0c86a083f28d1033cd24899f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "70ed42560f0ec6262eed6aaf05cd563b1bb9a6e7f82914942939c44c443c7037",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "eef4e1ed22a62a2ae8042e185d153f55a0216ad0a32fb0825a9b64954b060414",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "contracts\\libs\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "6d1e151ab6957ea4930a311944d9e4a5bcbf1e2d6117a6b2046274b102e8da7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\libs\\SafeMath.sol:8",
        "version": {
          "withMetadata": "c8c77fc9f7d8bc79210dac6597ce01d3b4518356d3e43d84692784ec6073e1b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StableMath": {
        "src": "contracts\\libs\\StableMath.sol:6",
        "version": {
          "withMetadata": "f6fcdb7e989c6719d0d9d322baae500756a80ec37c8661c20ce1a389c0ec2cdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "a5cea24f17b132d8b6df4579aba972e874dd644ed2839ed088f652d829513c04",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "8d2badd0ac655c462deafe2ace9d122de94369df91185003440677961950a3f9",
          "withoutMetadata": "c840650b8dafcae5f00944d0b6918f83c311e404cfe3ff7a9888cf50d70b5a68",
          "linkedWithoutMetadata": "c840650b8dafcae5f00944d0b6918f83c311e404cfe3ff7a9888cf50d70b5a68"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\libs\\ERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\libs\\ERC20.sol:156",
        "version": {
          "withMetadata": "8a4a3169fd22d8a2f2e3701cd189bd4656d9f773df1f8c62a233f11ac5eaa6e0",
          "withoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13",
          "linkedWithoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\libs\\ERC20.sol:173"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_totalSupply",
            "src": "contracts\\libs\\ERC20.sol:168"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\ERC20.sol:169"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\ERC20.sol:164"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\ERC20.sol:166"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\ERC20.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20.sol:169"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\ERC20.sol:20",
        "version": {
          "withMetadata": "5c57f36085cfaf6ea69a729eccd7cc60139672d2ec400f2454aafa87a6921e67",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH": {
        "src": "contracts\\libs\\weth.sol:5",
        "version": {
          "withMetadata": "5ce36234c2ba97b1c7c8bc318cfbcf91cebc259b44c09708a7760f20d04e6602",
          "withoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6",
          "linkedWithoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\libs\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\libs\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\libs\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:6"
            },
            {
              "contract": "WETH",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:7"
            },
            {
              "contract": "WETH",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\weth.sol:8"
            },
            {
              "contract": "WETH",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\weth.sol:15"
            },
            {
              "contract": "WETH",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathInt": {
        "src": "contracts\\libs\\SafeMathInt.sol:5",
        "version": {
          "withMetadata": "c059f1da2e21372642dcb69e3ded67e6ffa3c234007e51b6ef8e767fa4219142",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MinterRole": {
        "src": "contracts\\libs\\MinterRole.sol:7",
        "version": {
          "withMetadata": "c28ac9d7c5fbef45150f9d265584a657425c830e9b826f51cdca4cbf6b09fb5c",
          "withoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423",
          "linkedWithoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "()",
          "isMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts\\libs\\MinterRole.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)100_storage",
              "src": "contracts\\libs\\MinterRole.sol:13"
            }
          ],
          "types": {
            "t_struct(Role)100_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts\\libs\\Roles.sol:5",
        "version": {
          "withMetadata": "05087cb998faa832b75672ffc2428715309cb73c0c86a083f28d1033cd24899f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "70ed42560f0ec6262eed6aaf05cd563b1bb9a6e7f82914942939c44c443c7037",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "eef4e1ed22a62a2ae8042e185d153f55a0216ad0a32fb0825a9b64954b060414",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "contracts\\libs\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "6d1e151ab6957ea4930a311944d9e4a5bcbf1e2d6117a6b2046274b102e8da7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\libs\\SafeMath.sol:8",
        "version": {
          "withMetadata": "c8c77fc9f7d8bc79210dac6597ce01d3b4518356d3e43d84692784ec6073e1b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StableMath": {
        "src": "contracts\\libs\\StableMath.sol:6",
        "version": {
          "withMetadata": "f6fcdb7e989c6719d0d9d322baae500756a80ec37c8661c20ce1a389c0ec2cdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "a5cea24f17b132d8b6df4579aba972e874dd644ed2839ed088f652d829513c04",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "8d2badd0ac655c462deafe2ace9d122de94369df91185003440677961950a3f9",
          "withoutMetadata": "c840650b8dafcae5f00944d0b6918f83c311e404cfe3ff7a9888cf50d70b5a68",
          "linkedWithoutMetadata": "c840650b8dafcae5f00944d0b6918f83c311e404cfe3ff7a9888cf50d70b5a68"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\libs\\ERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\libs\\ERC20.sol:156",
        "version": {
          "withMetadata": "8a4a3169fd22d8a2f2e3701cd189bd4656d9f773df1f8c62a233f11ac5eaa6e0",
          "withoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13",
          "linkedWithoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\libs\\ERC20.sol:173"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_totalSupply",
            "src": "contracts\\libs\\ERC20.sol:168"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\ERC20.sol:169"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\ERC20.sol:164"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\ERC20.sol:166"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\ERC20.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20.sol:169"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\ERC20.sol:20",
        "version": {
          "withMetadata": "5c57f36085cfaf6ea69a729eccd7cc60139672d2ec400f2454aafa87a6921e67",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "a5cea24f17b132d8b6df4579aba972e874dd644ed2839ed088f652d829513c04",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "8d2badd0ac655c462deafe2ace9d122de94369df91185003440677961950a3f9",
          "withoutMetadata": "c840650b8dafcae5f00944d0b6918f83c311e404cfe3ff7a9888cf50d70b5a68",
          "linkedWithoutMetadata": "c840650b8dafcae5f00944d0b6918f83c311e404cfe3ff7a9888cf50d70b5a68"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "705979301dd91b3c7194dd89516c3823c729197924ef34f9f7169caee3b6685a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "fbeb57a00ff21e5f08979c85fed56109f6bd9989dc433dadd203dee79642692d",
          "withoutMetadata": "2cc1df145434202506e0deb8ca26c5cfe9e4e3ab6ef8e1ff188583fb8767c23b",
          "linkedWithoutMetadata": "2cc1df145434202506e0deb8ca26c5cfe9e4e3ab6ef8e1ff188583fb8767c23b"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "e1439ae1be5b4926b09efc806c544371e3bd6395c2d79084c6b4786bf4af4301",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "282b05e17e585d42f3bb8327764391b81e8a870534404df1939c0b89ea335c88",
          "withoutMetadata": "deebc5819b256a87a07595f6fbcad84a3f9df3d3aee069cd5cd6e26a6136234b",
          "linkedWithoutMetadata": "deebc5819b256a87a07595f6fbcad84a3f9df3d3aee069cd5cd6e26a6136234b"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "05d12d338ec5f3800c9b912aecbab190e4b6f4591e680ec2a8fab133f51ddc0c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "f432c275e5b8c2ebcfae856d73274c13702b43561926b045d5d691127130f823",
          "withoutMetadata": "db6341d99393cacc8b91ed7f05c8e06f02d9996ef763d0923262e0a0f9e13816",
          "linkedWithoutMetadata": "db6341d99393cacc8b91ed7f05c8e06f02d9996ef763d0923262e0a0f9e13816"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "3c1ec1983d0065669bc27b40b3ec42abdc9ebd2bc131ac1f7a97b50a23e9f9d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "5b120684f1abb7fd93d852699d1087d0e2a2edcd184edb37e62e214dae1c83e0",
          "withoutMetadata": "0a7649eb2f8ca939995e04fe892c034bb1c60532a3c698934923e0eae032d469",
          "linkedWithoutMetadata": "0a7649eb2f8ca939995e04fe892c034bb1c60532a3c698934923e0eae032d469"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "ee904546362f509f1ff19190dbb10730b329aa0de54510b3936357cf1b75ce4d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "2a88326f3a54afbda57fe636875699a0f48b27a93c0ebd7ef01fb64e5db336a5",
          "withoutMetadata": "ba5108ea86747b4f9cee271d0a45ac83fbdb9ada15a333e50c9fcfbfe966b03a",
          "linkedWithoutMetadata": "ba5108ea86747b4f9cee271d0a45ac83fbdb9ada15a333e50c9fcfbfe966b03a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "3c1ec1983d0065669bc27b40b3ec42abdc9ebd2bc131ac1f7a97b50a23e9f9d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "5b120684f1abb7fd93d852699d1087d0e2a2edcd184edb37e62e214dae1c83e0",
          "withoutMetadata": "0a7649eb2f8ca939995e04fe892c034bb1c60532a3c698934923e0eae032d469",
          "linkedWithoutMetadata": "0a7649eb2f8ca939995e04fe892c034bb1c60532a3c698934923e0eae032d469"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "5a3f5864caa0847f9a93ce2a636bee46a2661fa83060c4d98d8802fc2c7f0cc4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "b79b3885f2b7b326a3d3e40b2e47ea31665d0df54326179c2dc48b81cea7944d",
          "withoutMetadata": "ba5108ea86747b4f9cee271d0a45ac83fbdb9ada15a333e50c9fcfbfe966b03a",
          "linkedWithoutMetadata": "ba5108ea86747b4f9cee271d0a45ac83fbdb9ada15a333e50c9fcfbfe966b03a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "3bf51c9fe621f88f6576a6b53d7bb15e2b7956638d426f93e83a92a59b00da16",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "0ec33ada61102b84ccb61707322702735b2538b3ae14d232b46d06ac70065b83",
          "withoutMetadata": "91a81de69c8695a5ba86edcd20e58b671db3cf1ca0998b74f7729fce214f0234",
          "linkedWithoutMetadata": "91a81de69c8695a5ba86edcd20e58b671db3cf1ca0998b74f7729fce214f0234"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "3c1ec1983d0065669bc27b40b3ec42abdc9ebd2bc131ac1f7a97b50a23e9f9d7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "5b120684f1abb7fd93d852699d1087d0e2a2edcd184edb37e62e214dae1c83e0",
          "withoutMetadata": "0a7649eb2f8ca939995e04fe892c034bb1c60532a3c698934923e0eae032d469",
          "linkedWithoutMetadata": "0a7649eb2f8ca939995e04fe892c034bb1c60532a3c698934923e0eae032d469"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "be88509041515b3f85a5c2fee5ec248fca86c027172bbcc5527ad8b1ff45a573",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "1fff516b059a7c284e4f935032af0e3e55063108b9cf9670cc3c8b8a7a4b9f3f",
          "withoutMetadata": "89319ce27a2b34576f7e5dfecf32289f2e78c5da4adc83affe209a02f487a55e",
          "linkedWithoutMetadata": "89319ce27a2b34576f7e5dfecf32289f2e78c5da4adc83affe209a02f487a55e"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "e298bf86f8a572aa1022fc94d1a2284935252262b91f73bbf1e35bfcf5dd301e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "2e7c89e3219758921ecc54a46584b84e4f2a23563989a7542c4b496ed218f979",
          "withoutMetadata": "33b82ab2d1e4f339445a7fb48027eecb665953ac4eecf1c91f81c5cdc711c118",
          "linkedWithoutMetadata": "33b82ab2d1e4f339445a7fb48027eecb665953ac4eecf1c91f81c5cdc711c118"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "7ed35de8875c08caae37a769a9bf1bdadf2b839d708308c8fd01e6a3cabaebbb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "d9d921489372d4861e53f40bc607726ca7a779fd4a205116ba30b9944e3ab3e5",
          "withoutMetadata": "0a7649eb2f8ca939995e04fe892c034bb1c60532a3c698934923e0eae032d469",
          "linkedWithoutMetadata": "0a7649eb2f8ca939995e04fe892c034bb1c60532a3c698934923e0eae032d469"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "fac45c1789a487f2eae4508b3c8367e8e7337909b74f892cd9ddafaa452e302a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "98598b01a7c140316e009cd7e8dfa64a9aa8242a9769ce6b89dc8ab26abaaeda",
          "withoutMetadata": "f8fb161c8e42b2cb27266788701077d4f2c56af098dcfc7c49b5c8a4c0647157",
          "linkedWithoutMetadata": "f8fb161c8e42b2cb27266788701077d4f2c56af098dcfc7c49b5c8a4c0647157"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "93169ab33d6c9bfa2123a52720dc445e4c60ad5f15d16511ac471ad0feaab106",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "5feb6165b5079be751ff1b70d6695a96b2f222f119ce5fd212d4261eac05673b",
          "withoutMetadata": "bad83c4b1ac5ae4187711716ae233282b9f25ca002d7536f8ab2d416edd652bb",
          "linkedWithoutMetadata": "bad83c4b1ac5ae4187711716ae233282b9f25ca002d7536f8ab2d416edd652bb"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setBonfireFees(uint256[],uint256[])",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "74db9904004813a5e4c2ac7177172681d5e1ffa31145f6cedc532ac460d31a63",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "abff039c2db4c45a8b32d48f648fb472ad89d61597d64d0cdf77f6cad588f6e8",
          "withoutMetadata": "72beed329b2e1a1ad988a1e75ccaa0bbeb60f41ea84629ce1a73ddf53b926e48",
          "linkedWithoutMetadata": "72beed329b2e1a1ad988a1e75ccaa0bbeb60f41ea84629ce1a73ddf53b926e48"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH": {
        "src": "contracts\\libs\\weth.sol:5",
        "version": {
          "withMetadata": "5ce36234c2ba97b1c7c8bc318cfbcf91cebc259b44c09708a7760f20d04e6602",
          "withoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6",
          "linkedWithoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\libs\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\libs\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\libs\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:6"
            },
            {
              "contract": "WETH",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:7"
            },
            {
              "contract": "WETH",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\weth.sol:8"
            },
            {
              "contract": "WETH",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\weth.sol:15"
            },
            {
              "contract": "WETH",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathInt": {
        "src": "contracts\\libs\\SafeMathInt.sol:5",
        "version": {
          "withMetadata": "c059f1da2e21372642dcb69e3ded67e6ffa3c234007e51b6ef8e767fa4219142",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MinterRole": {
        "src": "contracts\\libs\\MinterRole.sol:7",
        "version": {
          "withMetadata": "c28ac9d7c5fbef45150f9d265584a657425c830e9b826f51cdca4cbf6b09fb5c",
          "withoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423",
          "linkedWithoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "()",
          "isMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts\\libs\\MinterRole.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)100_storage",
              "src": "contracts\\libs\\MinterRole.sol:13"
            }
          ],
          "types": {
            "t_struct(Role)100_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts\\libs\\Roles.sol:5",
        "version": {
          "withMetadata": "05087cb998faa832b75672ffc2428715309cb73c0c86a083f28d1033cd24899f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "70ed42560f0ec6262eed6aaf05cd563b1bb9a6e7f82914942939c44c443c7037",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "eef4e1ed22a62a2ae8042e185d153f55a0216ad0a32fb0825a9b64954b060414",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "contracts\\libs\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "6d1e151ab6957ea4930a311944d9e4a5bcbf1e2d6117a6b2046274b102e8da7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\libs\\SafeMath.sol:8",
        "version": {
          "withMetadata": "c8c77fc9f7d8bc79210dac6597ce01d3b4518356d3e43d84692784ec6073e1b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StableMath": {
        "src": "contracts\\libs\\StableMath.sol:6",
        "version": {
          "withMetadata": "f6fcdb7e989c6719d0d9d322baae500756a80ec37c8661c20ce1a389c0ec2cdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "dfee4f67887cbcf7cc0f51d471f432928bfbc5c4e9faa3eb418b8b0ca8335380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "12dd96e5e819c168c0f25ccbc483b15c31a5ce4b9539a8bf82ebd57048fade18",
          "withoutMetadata": "a10e73e75596e8ba1c4db4bec3ea8f164b5519959998ed8178e62a2a4b53407a",
          "linkedWithoutMetadata": "a10e73e75596e8ba1c4db4bec3ea8f164b5519959998ed8178e62a2a4b53407a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:206"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:211"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\libs\\ERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\libs\\ERC20.sol:156",
        "version": {
          "withMetadata": "8a4a3169fd22d8a2f2e3701cd189bd4656d9f773df1f8c62a233f11ac5eaa6e0",
          "withoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13",
          "linkedWithoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\libs\\ERC20.sol:173"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_totalSupply",
            "src": "contracts\\libs\\ERC20.sol:168"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\ERC20.sol:169"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\ERC20.sol:164"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\ERC20.sol:166"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\ERC20.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20.sol:169"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\ERC20.sol:20",
        "version": {
          "withMetadata": "5c57f36085cfaf6ea69a729eccd7cc60139672d2ec400f2454aafa87a6921e67",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "9a037bb9d58d10409712a849b5952a314c4a051115a54c020f7af0873f05dd89",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "714a7e07a8cac6595d25e8f122154c3fdb4fbec17c3bbee9ae207966345938a9",
          "withoutMetadata": "2e8343678090923228dbcc7651090899c79e1a90cd16181e52b4de3057ed4788",
          "linkedWithoutMetadata": "2e8343678090923228dbcc7651090899c79e1a90cd16181e52b4de3057ed4788"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "66ce9a46226de70c2b830e82f156d8f1254b94a67fe20fcba3259dc8ce4ac0d6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "37293535e6b5da14be2e66fbaba3e8b014776d353d89acf66e07c433a47951ed",
          "withoutMetadata": "f328203dbd745c546ef0236cc127c58b42226eb2b1d1269aae8d67a3022a4951",
          "linkedWithoutMetadata": "f328203dbd745c546ef0236cc127c58b42226eb2b1d1269aae8d67a3022a4951"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "6a6ed725ac1a34df923bdaf6d89e27338ff31f0e627e6fe2c0a7be30eb498752",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "6b781e9849b2bc5ec922000b762bc30b5d20ae8eefe3c9cb4216fb636ff7e7ac",
          "withoutMetadata": "dbda3651e4c397be6c594a71ceffcacd12449d7fb6564ef193d39c160b50ac0e",
          "linkedWithoutMetadata": "dbda3651e4c397be6c594a71ceffcacd12449d7fb6564ef193d39c160b50ac0e"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "a4195585b75be4de999a6d047bc41591e5c410dea20fe828f0f79aa977bc0070",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "ac1575f12861dbd697261a0700dfdd01023b84a5d1a4cdc0f43713959829f18e",
          "withoutMetadata": "ee40fb1242ba4fa5ddfedff44e731ab393ed603da42417678dd6764ded0fdf3b",
          "linkedWithoutMetadata": "ee40fb1242ba4fa5ddfedff44e731ab393ed603da42417678dd6764ded0fdf3b"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "fe643a834899a19f7e9f46ccdb0656fb91d62332f01337f222d5ea619840902b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "f6691f78baa5e64862aeb495dd3664245e8085340ecdb2feea2f66b8c7a8c0d4",
          "withoutMetadata": "13f4f56b9f0e3aa570074f2934f76c5c25585f213586906515214ea8af077738",
          "linkedWithoutMetadata": "13f4f56b9f0e3aa570074f2934f76c5c25585f213586906515214ea8af077738"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "86d0184d7bef606842be68ac10e979a52997e1ff69b58b6da074990899ca27bd",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "61c3f568c43c3cae1ff9ff53a5c70e9e9853e38444fc3690ea4c7d40f3166322",
          "withoutMetadata": "2b3815d0dc848bd8d481a65ffaeddbb53a1db38bee1d82e4cea91df0d798985a",
          "linkedWithoutMetadata": "2b3815d0dc848bd8d481a65ffaeddbb53a1db38bee1d82e4cea91df0d798985a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "6c9f96e622546a7d2b07f7f4fc2465d03a10c8f49fd7ccccfac074c66a878430",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "75223c6e96267820b29f8a1904cd67c6dfe4da5ec85932925d4689bb6344696f",
          "withoutMetadata": "08172af7e461e4c8f7aa4f2431158772e451e0508bfccc9a5a0d6f40995352c6",
          "linkedWithoutMetadata": "08172af7e461e4c8f7aa4f2431158772e451e0508bfccc9a5a0d6f40995352c6"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "349c1c601dc3d7b0976129f17c05edfce42da31323a68aad2d845d19681c3554",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "dd8f07d8f8b9298350591b84259ab23e0f0b2f4d013935a2a116a2e225afc639",
          "withoutMetadata": "f328203dbd745c546ef0236cc127c58b42226eb2b1d1269aae8d67a3022a4951",
          "linkedWithoutMetadata": "f328203dbd745c546ef0236cc127c58b42226eb2b1d1269aae8d67a3022a4951"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "43e60e1e2d24ac26b7fc295bbdcce3ed686155d9b9e86db35080b8d9a387d21d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "f2018b5d3dbff4f83389ddaf06058c31199277c521aeb1cec4841d54c9361298",
          "withoutMetadata": "118addb6b0242e4100979a37c6d2fd13ed5d6b4dd6a3d2ef87c6eaf53512ec9e",
          "linkedWithoutMetadata": "118addb6b0242e4100979a37c6d2fd13ed5d6b4dd6a3d2ef87c6eaf53512ec9e"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "cc580b992f0dbaadf2c628e7b624dae29d80dc44e6ee6a8d7a702e7ff22a6d42",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "ef477d0882859dac0c5a7807c101e3cfc644c4965c492d5e2257380a8968bf3f",
          "withoutMetadata": "61449416a90051b57072d52996363596b88a8383f7265e89d21901e587993339",
          "linkedWithoutMetadata": "61449416a90051b57072d52996363596b88a8383f7265e89d21901e587993339"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2503",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2503": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:114",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "31a60e6c558786262feeb833daaf922066fd2521629e2e0947d0603ddea63fd7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:120",
        "version": {
          "withMetadata": "94042bd81869d92defa440d4d34bab822960402b967b561945d987d0ffe408f4",
          "withoutMetadata": "93bb2b8e726abef16561d4f348c12b1405ef4f2a86cb7175379d2720451a6fd8",
          "linkedWithoutMetadata": "93bb2b8e726abef16561d4f348c12b1405ef4f2a86cb7175379d2720451a6fd8"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:124"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:129"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:134"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:137"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:140"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:143"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:162"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2502",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:184"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:205"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2502": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:114",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "865b06ca62d1516104bc44dc184f0e75413535aff71d9cab6a5a95fd0b74419e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:120",
        "version": {
          "withMetadata": "95a750de405b4a2deffee5d412a7d4ff48e2f63cd355ba856e445740171f9d59",
          "withoutMetadata": "f328203dbd745c546ef0236cc127c58b42226eb2b1d1269aae8d67a3022a4951",
          "linkedWithoutMetadata": "f328203dbd745c546ef0236cc127c58b42226eb2b1d1269aae8d67a3022a4951"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:124"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:129"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:134"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:137"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:140"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:143"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:162"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2502",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:184"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:205"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2502": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:114",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "95a3a6752196e5c12815faf1e3b76f7303069c9122b12d282c59c7d3e4ba8557",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:120",
        "version": {
          "withMetadata": "6a399c6af557f4b3e45e0ab9b36bbd9484c1246683e5e872e671a866f6033814",
          "withoutMetadata": "e1678c89595d6f02a2f74d1b8969220e87f36c243e17002527f7ebdb17133213",
          "linkedWithoutMetadata": "e1678c89595d6f02a2f74d1b8969220e87f36c243e17002527f7ebdb17133213"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address,address,address,address,address[])",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:124"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:129"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:134"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:137"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:140"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:143"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:162"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2502",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:184"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:205"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2502": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:114",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "dbd11cacdf5434823fd4fc19c520b19faa289ab238dd43ab626564ca10dc7e9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:120",
        "version": {
          "withMetadata": "39d4c4bad755a4b13796025e3eb7f0a9cdbd7805374740b3f02bd5880a81952a",
          "withoutMetadata": "10bc498e018e920234c4bd0492c634f72995affc23d81fd315d50c316032b845",
          "linkedWithoutMetadata": "10bc498e018e920234c4bd0492c634f72995affc23d81fd315d50c316032b845"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address,address,address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:124"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:129"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:134"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:137"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:140"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:143"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:162"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2502",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:184"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:205"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2502": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:114",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "08a62af0ee7d66f2d900e2a910487012ea5f61bbedfce70149a0337e04e165dc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:120",
        "version": {
          "withMetadata": "37be2e80eb165750049e3fd4da7bf59e6a690cb515c9645f6dd8bcac33da87ea",
          "withoutMetadata": "c77b35e948f46222d22a22135e8b8907f5c91636c2aa32822c0b7d80a753dc8a",
          "linkedWithoutMetadata": "c77b35e948f46222d22a22135e8b8907f5c91636c2aa32822c0b7d80a753dc8a"
        },
        "inherit": [
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address,address,address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:159"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:160"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:124"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:129"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:134"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:137"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:140"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:143"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:159"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:162"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2502",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:172"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:179"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:184"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:204"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:205"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2502": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "70ed42560f0ec6262eed6aaf05cd563b1bb9a6e7f82914942939c44c443c7037",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "eef4e1ed22a62a2ae8042e185d153f55a0216ad0a32fb0825a9b64954b060414",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "7338a43477690049aa2d6a540ae39a6336272fe61cd26a29b20a988056b87f10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:87"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1822ProxiableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\interfaces\\draft-IERC1822Upgradeable.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxiableUUID()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:20",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\ERC1967\\ERC1967UpgradeUpgradeable.sol:211"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\beacon\\IBeaconUpgradeable.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:35",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:39"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:44"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:22",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "proxiableUUID()",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\UUPSUpgradeable.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "40e52cce424b575a81156d0ce0ea0522000bf26b4d84cc3033c73de062d3e337",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\StorageSlotUpgradeable.sol:32",
        "version": {
          "withMetadata": "d0dccc0c44a44aada3081f9b5bd62c3ccfec44403f09e712b9b16c684ef24a09",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "d4472ea231a4fb566db33aa6bc71efe7b5a6a52a6fa1edc6513e7bc6b413c4e7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:115",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:53",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:49",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:13",
        "version": {
          "withMetadata": "773f203a082dcf0f77e0fe662c9c785115e149d9c9606356acca0821805fdfdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:121",
        "version": {
          "withMetadata": "ea96e021620a94091ae0dfa502342ba4d23ea80927782d59bda22bdc53d2a492",
          "withoutMetadata": "2e6fae4afb59baf186742f3fffbc1fa65c616aae39c21d4730410181a67d14bc",
          "linkedWithoutMetadata": "2e6fae4afb59baf186742f3fffbc1fa65c616aae39c21d4730410181a67d14bc"
        },
        "inherit": [
          "ReentrancyGuard",
          "IERC20",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "IERC1822ProxiableUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "initialize(address,address,address,address,address,address)",
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:161"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:125"
            },
            {
              "contract": "Swello",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:126"
            },
            {
              "contract": "Swello",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:127"
            },
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:130"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:131"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:132"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:133"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:135"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:136"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:138"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:139"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:141"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:142"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:144"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:145"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:146"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:165"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)2543",
              "src": "contracts\\Swello.sol:169"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:170"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:171"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:173"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:174"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:175"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:176"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:177"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:178"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:180"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:181"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:190"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:194"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:201"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:206"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)2543": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "46cdc6dc769941bbfe9af8085e4760845bfc5e2f40609e2c587570259772deb5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "709fe6895aebfd3cc85ff12885f2ba661c132092796c6fb02b1849bb17f46a23",
          "withoutMetadata": "36c8e73f181bbcf3b27595c1a110dd65403d7364ccb57f11db8249008ee88a68",
          "linkedWithoutMetadata": "36c8e73f181bbcf3b27595c1a110dd65403d7364ccb57f11db8249008ee88a68"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "cd6061d3ab9b53700bab7e64674e2f4e3fb5b09201473b0b3079e060e32ba606",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "40f436167fbc178959c69f7b75f1efafb3fcf2015600ce26617e4d08b0b67a30",
          "withoutMetadata": "e86fe7126fc19dcc09d3de8fca5d034ac7117978363b1bab0ad258a440cffc35",
          "linkedWithoutMetadata": "e86fe7126fc19dcc09d3de8fca5d034ac7117978363b1bab0ad258a440cffc35"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "46cdc6dc769941bbfe9af8085e4760845bfc5e2f40609e2c587570259772deb5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "709fe6895aebfd3cc85ff12885f2ba661c132092796c6fb02b1849bb17f46a23",
          "withoutMetadata": "36c8e73f181bbcf3b27595c1a110dd65403d7364ccb57f11db8249008ee88a68",
          "linkedWithoutMetadata": "36c8e73f181bbcf3b27595c1a110dd65403d7364ccb57f11db8249008ee88a68"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "cd6061d3ab9b53700bab7e64674e2f4e3fb5b09201473b0b3079e060e32ba606",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "40f436167fbc178959c69f7b75f1efafb3fcf2015600ce26617e4d08b0b67a30",
          "withoutMetadata": "e86fe7126fc19dcc09d3de8fca5d034ac7117978363b1bab0ad258a440cffc35",
          "linkedWithoutMetadata": "e86fe7126fc19dcc09d3de8fca5d034ac7117978363b1bab0ad258a440cffc35"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "46cdc6dc769941bbfe9af8085e4760845bfc5e2f40609e2c587570259772deb5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "709fe6895aebfd3cc85ff12885f2ba661c132092796c6fb02b1849bb17f46a23",
          "withoutMetadata": "36c8e73f181bbcf3b27595c1a110dd65403d7364ccb57f11db8249008ee88a68",
          "linkedWithoutMetadata": "36c8e73f181bbcf3b27595c1a110dd65403d7364ccb57f11db8249008ee88a68"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "2324abc534e41fb2ab6df8d87e777c5414e425cf416359bfc7ea9e57b6281fa4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "e2424c6d9ad9541f5ace6494eefec0bc2b6a9fc086e699c7af4dd265f8f43618",
          "withoutMetadata": "0ea3e549912a074731debb3f95638f2d0d6e1eec889df47a058d4904a7df189b",
          "linkedWithoutMetadata": "0ea3e549912a074731debb3f95638f2d0d6e1eec889df47a058d4904a7df189b"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "29f3cd4bb32089d844cc7b6630226ae0b2055a6b6e2e56f8aecd42662c784095",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "ee6effeb27bd6ec68a197baf154134b42f62f66c0fbe77e0207e709fe48a2ae8",
          "withoutMetadata": "e740484dd358773062d6cb345a50690837436f997c573cc4457881096a89c2f2",
          "linkedWithoutMetadata": "e740484dd358773062d6cb345a50690837436f997c573cc4457881096a89c2f2"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "a2576e41f63e693c418c5196cf4fcf61392a1178d7f128cc88f9fca4c8b381ea",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "0b71c61e38acdc7cf5c986a5d1c66d12de141c3e6869d0e895ad8f9933f17fee",
          "withoutMetadata": "d12c034327455aa8e08726588f02cdaa34423883ba16bb18c6f5b96d04bcc77b",
          "linkedWithoutMetadata": "d12c034327455aa8e08726588f02cdaa34423883ba16bb18c6f5b96d04bcc77b"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "6378e781524d999dd6721f5f4091b637f71a10c87d1a6d082207de4047b88fb6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "320bfe3b36d928afbca13917f2d51e74f4943d4f481c2af7cf72170200942cb2",
          "withoutMetadata": "0786ba51ffd7a3fdb05da4f6c8d678ff6c7472a7a0bb9e94a86fdff5f8b97bde",
          "linkedWithoutMetadata": "0786ba51ffd7a3fdb05da4f6c8d678ff6c7472a7a0bb9e94a86fdff5f8b97bde"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "1e0cc5e35582b20fac7b70d1c51648f62c4a6493773c455500820ec5a5d1c1d3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "bed2629c35874299ce92015567c4b6cc1619a98f989c2fec59ebca46cf73c0dd",
          "withoutMetadata": "eb8f66602b6f063344ba7da459c95dacbefbc64eedf39b05492463aafaca7eb6",
          "linkedWithoutMetadata": "eb8f66602b6f063344ba7da459c95dacbefbc64eedf39b05492463aafaca7eb6"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "3fc19ae4af129458f4a3a9a511c0c37c03f59e5331c5bad0719479ebab4a4778",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "b119d370800eabe5f2ce0dfa1939661f6bde4729f5135c54c9f5c88e2f0f46d5",
          "withoutMetadata": "929efcf91a63c5ae916b3e47ef44554ff79ced47c3efea79710f8187d8da93dc",
          "linkedWithoutMetadata": "929efcf91a63c5ae916b3e47ef44554ff79ced47c3efea79710f8187d8da93dc"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt",
          "console"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Nicker": {
        "src": "contracts\\Nicker.sol:14",
        "version": {
          "withMetadata": "2921eb271a841bb8cff6d7f5b6cb7cfbeae6e790440d6364e3c23a3b04971a2e",
          "withoutMetadata": "451ee5dfdaef1b67579040f31ab69c5556e9b8eb3314e676a7a039f0d6f07618",
          "linkedWithoutMetadata": "451ee5dfdaef1b67579040f31ab69c5556e9b8eb3314e676a7a039f0d6f07618"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "pullForBUSD(address[],address,address)",
          "pullForBNB(address[],address)",
          "pull(address[],address)",
          "withdrawForToken(address)",
          "withdrawForBNB()",
          "getReservesForToken(address,address,address)",
          "getReservesForBNB(address)",
          "balanceOf(address)",
          "owner()",
          "currentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Nicker",
            "src": "contracts\\Nicker.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Nicker",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\Nicker.sol:16"
            },
            {
              "contract": "Nicker",
              "label": "uniswapV2Router",
              "type": "t_address",
              "src": "contracts\\Nicker.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Nicker": {
        "src": "contracts\\Nicker.sol:14",
        "version": {
          "withMetadata": "1c81c6c6ea61efea974d8f4b3996ff609ebc2f1829221bf56682a67edbbfa5d6",
          "withoutMetadata": "3264fe89b776cd3512671c13fb8591de292057fcf72f173c9cf536a2111d00bf",
          "linkedWithoutMetadata": "3264fe89b776cd3512671c13fb8591de292057fcf72f173c9cf536a2111d00bf"
        },
        "inherit": [],
        "libraries": [
          "console"
        ],
        "methods": [
          "(address)",
          "pullForBUSD(address[],address,address)",
          "pullForBNB(address[],address)",
          "pull(address[],address)",
          "withdrawForToken(address)",
          "withdrawForBNB()",
          "getReservesForToken(address,address,address)",
          "getReservesForBNB(address)",
          "balanceOf(address)",
          "owner()",
          "currentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Nicker",
            "src": "contracts\\Nicker.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Nicker",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\Nicker.sol:16"
            },
            {
              "contract": "Nicker",
              "label": "uniswapV2Router",
              "type": "t_address",
              "src": "contracts\\Nicker.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Nicker": {
        "src": "contracts\\Nicker.sol:14",
        "version": {
          "withMetadata": "2921eb271a841bb8cff6d7f5b6cb7cfbeae6e790440d6364e3c23a3b04971a2e",
          "withoutMetadata": "451ee5dfdaef1b67579040f31ab69c5556e9b8eb3314e676a7a039f0d6f07618",
          "linkedWithoutMetadata": "451ee5dfdaef1b67579040f31ab69c5556e9b8eb3314e676a7a039f0d6f07618"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "pullForBUSD(address[],address,address)",
          "pullForBNB(address[],address)",
          "pull(address[],address)",
          "withdrawForToken(address)",
          "withdrawForBNB()",
          "getReservesForToken(address,address,address)",
          "getReservesForBNB(address)",
          "balanceOf(address)",
          "owner()",
          "currentTime()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Nicker",
            "src": "contracts\\Nicker.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Nicker",
              "label": "admin",
              "type": "t_address",
              "src": "contracts\\Nicker.sol:16"
            },
            {
              "contract": "Nicker",
              "label": "uniswapV2Router",
              "type": "t_address",
              "src": "contracts\\Nicker.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\interfaces\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interfaces\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "66ed4192d3c2c7dab95af29796d3ee42adb3342bdda8918d3897a928b08ff451",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "b675476df4d8507b0b3eae5c73a63cba78fe362d2ea32eb9fb03b8b62d524133",
          "withoutMetadata": "740c42cb22de815c5786acafd34c82359188b0caad9c95bd3d6f40987e8b2287",
          "linkedWithoutMetadata": "740c42cb22de815c5786acafd34c82359188b0caad9c95bd3d6f40987e8b2287"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interfaces\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "c2550c4d6a61479fa3c238e106161a84a7305d522f5c410ea10676afec472a10",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interface\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH": {
        "src": "contracts\\libs\\weth.sol:5",
        "version": {
          "withMetadata": "5ce36234c2ba97b1c7c8bc318cfbcf91cebc259b44c09708a7760f20d04e6602",
          "withoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6",
          "linkedWithoutMetadata": "e2f908cd0a47e73fffc9e916c68301b899645121289275b3747b354cb7fb2ac6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\libs\\weth.sol:6"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\libs\\weth.sol:7"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\libs\\weth.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:6"
            },
            {
              "contract": "WETH",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\weth.sol:7"
            },
            {
              "contract": "WETH",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\weth.sol:8"
            },
            {
              "contract": "WETH",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\weth.sol:15"
            },
            {
              "contract": "WETH",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\weth.sol:16"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMathInt": {
        "src": "contracts\\libs\\SafeMathInt.sol:5",
        "version": {
          "withMetadata": "c059f1da2e21372642dcb69e3ded67e6ffa3c234007e51b6ef8e767fa4219142",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "MinterRole": {
        "src": "contracts\\libs\\MinterRole.sol:7",
        "version": {
          "withMetadata": "c28ac9d7c5fbef45150f9d265584a657425c830e9b826f51cdca4cbf6b09fb5c",
          "withoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423",
          "linkedWithoutMetadata": "79c48f6c4c87903424dcd7fad223ac888d8aa556bfc15f75d66050a097b2b423"
        },
        "inherit": [],
        "libraries": [
          "Roles"
        ],
        "methods": [
          "()",
          "isMinter(address)",
          "renounceMinter()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MinterRole",
            "src": "contracts\\libs\\MinterRole.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MinterRole",
              "label": "_minters",
              "type": "t_struct(Role)100_storage",
              "src": "contracts\\libs\\MinterRole.sol:13"
            }
          ],
          "types": {
            "t_struct(Role)100_storage": {
              "label": "struct Roles.Role",
              "members": [
                {
                  "label": "bearer",
                  "type": "t_mapping(t_address,t_bool)"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Roles": {
        "src": "contracts\\libs\\Roles.sol:5",
        "version": {
          "withMetadata": "05087cb998faa832b75672ffc2428715309cb73c0c86a083f28d1033cd24899f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Router01": {
        "src": "contracts\\interface\\IUniswapV2Router.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\interface\\IUniswapV2Router.sol:98",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Pair": {
        "src": "contracts\\interface\\IUniswapV2Pair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "e154824d43210fa78fccbfea5e633f9e6662bb0c9715bd6ffa69fc50d0c3737b",
          "withoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430",
          "linkedWithoutMetadata": "fb674735346ca3c09acccd985cdd5be31a4e6569ccac75d5861d24b905c2c430"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "ed016bf8981af137429e8b3a66ea562a6838bfa01125ace3337bc9c5abd22e59",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interface\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\libs\\ERC20Detailed.sol:6",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\libs\\ERC20Detailed.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:7"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20Detailed.sol:8"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20Detailed.sol:9"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:94",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "contracts\\libs\\dexRouter.sol:226",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapLibrary": {
        "src": "contracts\\libs\\dexRouter.sol:715",
        "version": {
          "withMetadata": "5683c56f02846240647fdc4d60a32fd1c68d9d7b6a641f24dbf4c39a8b8571c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapRouter": {
        "src": "contracts\\libs\\dexRouter.sol:232",
        "version": {
          "withMetadata": "b49b3842129aa5d28dc61a459b8d4e5cdc0960e055e8c6d2ffe30f1a9a48cfee",
          "withoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb",
          "linkedWithoutMetadata": "4a4ce9116bd71e89aea72370e9777e8dfd73e3d0b6dbb4cad18b6e5c4a90cceb"
        },
        "inherit": [
          "IPancakeSwapRouter"
        ],
        "libraries": [
          "SafeMath",
          "PancakeSwapLibrary",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapRouter",
            "src": "contracts\\libs\\dexRouter.sol:243"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapRouter",
              "label": "factoryAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:235"
            },
            {
              "contract": "PancakeSwapRouter",
              "label": "WETHAddr",
              "type": "t_address",
              "src": "contracts\\libs\\dexRouter.sol:236"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "contracts\\libs\\dexRouter.sol:797",
        "version": {
          "withMetadata": "ee33936235c73567de31c9cdbc1a09993bf12690e61dc5ccaf1c6ffcde7c38c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "83f170bd8265dff52985e654d12d82da3d2a1419405a8569c5f8b866e0e184db",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "9ad4c80cfbdb8290e99f1b2089721f1f6ea0d4b147bf875f110af16363e90a26",
          "withoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797",
          "linkedWithoutMetadata": "0bc2d8210ec9362e8f59ad8184ed33ebba4eec0fcf87a54a2b71c43467067797"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "8562dc27b21d7d077ce0a72de8d9cc63f95be2b5064165cab39f8b6483766ea8",
          "withoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42",
          "linkedWithoutMetadata": "7491fb4907fc0ac2ac164720fd9ebd6f7a7ac6a2114dc997f527e48d43139b42"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "277dd2ed49f3f8cd9f4a3a270e77234f00557641146c57361c79b2bbc75f56e8",
          "withoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0",
          "linkedWithoutMetadata": "89281a0d484647dd568a6399e8bad231575b1c5fb1eabab15c5b3a85940df4b0"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "824b1ea54d7130cb5c3b15bf03d925203621b5afdc392305c5ef1e0f42048518",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "bbcff4a844bcc6d88bc4102204a3192020ca0647fd98f516c30746a9ac660974",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "contracts\\libs\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "6d1e151ab6957ea4930a311944d9e4a5bcbf1e2d6117a6b2046274b102e8da7b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "SafeMath": {
        "src": "contracts\\libs\\SafeMath.sol:8",
        "version": {
          "withMetadata": "c8c77fc9f7d8bc79210dac6597ce01d3b4518356d3e43d84692784ec6073e1b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "StableMath": {
        "src": "contracts\\libs\\StableMath.sol:6",
        "version": {
          "withMetadata": "f6fcdb7e989c6719d0d9d322baae500756a80ec37c8661c20ce1a389c0ec2cdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IBEP20": {
        "src": "contracts\\libs\\IBEP20.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\security\\ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "2a5c78859364ca07732714c75928b109a753ece6ea685466c5e3b337fb37fb02",
          "withoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9",
          "linkedWithoutMetadata": "1ff1588d4a6b524fb8dae9c56bac1712306f56841c95ba5229319c9fe29e31d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\dexfactory.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\dexfactory.sol:534",
        "version": {
          "withMetadata": "46b524856e9b108b05871c3cc70a5097915c5eb5f9e01d7f66bf78b27e0fda2d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts\\Swello.sol:52",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts\\Swello.sol:57"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:53"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\Swello.sol:54"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\Swello.sol:55"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDEXFactory": {
        "src": "contracts\\Swello.sol:142",
        "inherit": [],
        "libraries": [],
        "methods": [
          "createPair(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDEXRouter": {
        "src": "contracts\\Swello.sol:80",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "InterfaceLP": {
        "src": "contracts\\Swello.sol:48",
        "inherit": [],
        "libraries": [],
        "methods": [
          "sync()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\Swello.sol:12",
        "version": {
          "withMetadata": "66ed4192d3c2c7dab95af29796d3ee42adb3342bdda8918d3897a928b08ff451",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Swello": {
        "src": "contracts\\Swello.sol:148",
        "version": {
          "withMetadata": "b675476df4d8507b0b3eae5c73a63cba78fe362d2ea32eb9fb03b8b62d524133",
          "withoutMetadata": "740c42cb22de815c5786acafd34c82359188b0caad9c95bd3d6f40987e8b2287",
          "linkedWithoutMetadata": "740c42cb22de815c5786acafd34c82359188b0caad9c95bd3d6f40987e8b2287"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context",
          "ERC20Detailed",
          "IERC20"
        ],
        "libraries": [
          "SafeMath",
          "SafeMathInt"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "()",
          "totalSupply()",
          "blockTime()",
          "allowance(address,address)",
          "balanceOf(address)",
          "checkFeeExempt(address)",
          "checkSwapThreshold()",
          "getCirculatingSupply()",
          "getLiquidityBacking(uint256)",
          "isOverLiquified(uint256,uint256)",
          "manualSync()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "approve(address,uint256)",
          "manualRebase()",
          "setAutomatedMarketMakerPair(address,bool)",
          "setInitialDistributionFinished(bool)",
          "setFeeExempt(address,bool)",
          "setTargetLiquidity(uint256,uint256)",
          "setSwapBackSettings(bool,uint256,uint256)",
          "setFeeReceivers(address,address,address,address)",
          "setFees(uint256,uint256,uint256,uint256,uint256)",
          "clearStuckBalance(address)",
          "setAutoRebase(bool)",
          "setRebaseFrequency(uint256)",
          "setAutoLPFrequency(uint256)",
          "setRewardYield(uint256,uint256)",
          "setIsLiquidityInBnb(bool)",
          "setNextRebase(uint256)",
          "setNextAutoLP(uint256)",
          "currentTimestamp()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Swello",
            "src": "contracts\\Swello.sol:242"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialDistributionFinished",
            "src": "contracts\\Swello.sol:152"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\Swello.sol:153"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoRebase",
            "src": "contracts\\Swello.sol:154"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isLiquidityInBnb",
            "src": "contracts\\Swello.sol:155"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYield",
            "src": "contracts\\Swello.sol:157"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardYieldDenominator",
            "src": "contracts\\Swello.sol:158"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rebaseFrequency",
            "src": "contracts\\Swello.sol:160"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextRebase",
            "src": "contracts\\Swello.sol:161"
          },
          {
            "kind": "state-variable-assignment",
            "name": "autoLPFrequency",
            "src": "contracts\\Swello.sol:163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nextAutoLP",
            "src": "contracts\\Swello.sol:164"
          },
          {
            "kind": "state-variable-assignment",
            "name": "DEAD",
            "src": "contracts\\Swello.sol:182"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ZERO",
            "src": "contracts\\Swello.sol:183"
          },
          {
            "kind": "state-variable-assignment",
            "name": "liquidityFee",
            "src": "contracts\\Swello.sol:195"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryFee",
            "src": "contracts\\Swello.sol:196"
          },
          {
            "kind": "state-variable-assignment",
            "name": "safetyFundFee",
            "src": "contracts\\Swello.sol:197"
          },
          {
            "kind": "state-variable-assignment",
            "name": "sellFeeliquidityAdded",
            "src": "contracts\\Swello.sol:198"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalBuyFee",
            "src": "contracts\\Swello.sol:199"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalSellFee",
            "src": "contracts\\Swello.sol:200"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBalanceThresholds",
            "src": "contracts\\Swello.sol:202"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireFees",
            "src": "contracts\\Swello.sol:203"
          },
          {
            "kind": "state-variable-assignment",
            "name": "feeDenominator",
            "src": "contracts\\Swello.sol:205"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireBurn",
            "src": "contracts\\Swello.sol:207"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireTreasury",
            "src": "contracts\\Swello.sol:208"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireCharity",
            "src": "contracts\\Swello.sol:209"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bonfireDenominator",
            "src": "contracts\\Swello.sol:210"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidity",
            "src": "contracts\\Swello.sol:212"
          },
          {
            "kind": "state-variable-assignment",
            "name": "targetLiquidityDenominator",
            "src": "contracts\\Swello.sol:213"
          },
          {
            "kind": "state-variable-assignment",
            "name": "gonSwapThreshold",
            "src": "contracts\\Swello.sol:237"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Swello",
              "label": "initialDistributionFinished",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:152"
            },
            {
              "contract": "Swello",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:153"
            },
            {
              "contract": "Swello",
              "label": "autoRebase",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:154"
            },
            {
              "contract": "Swello",
              "label": "isLiquidityInBnb",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:155"
            },
            {
              "contract": "Swello",
              "label": "rewardYield",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:157"
            },
            {
              "contract": "Swello",
              "label": "rewardYieldDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:158"
            },
            {
              "contract": "Swello",
              "label": "rebaseFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:160"
            },
            {
              "contract": "Swello",
              "label": "nextRebase",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:161"
            },
            {
              "contract": "Swello",
              "label": "autoLPFrequency",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:163"
            },
            {
              "contract": "Swello",
              "label": "nextAutoLP",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:164"
            },
            {
              "contract": "Swello",
              "label": "_isFeeExempt",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:166"
            },
            {
              "contract": "Swello",
              "label": "_markerPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\Swello.sol:167"
            },
            {
              "contract": "Swello",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Swello.sol:168"
            },
            {
              "contract": "Swello",
              "label": "DEAD",
              "type": "t_address",
              "src": "contracts\\Swello.sol:182"
            },
            {
              "contract": "Swello",
              "label": "ZERO",
              "type": "t_address",
              "src": "contracts\\Swello.sol:183"
            },
            {
              "contract": "Swello",
              "label": "liquidityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:185"
            },
            {
              "contract": "Swello",
              "label": "treasuryReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:186"
            },
            {
              "contract": "Swello",
              "label": "safetyFundReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:187"
            },
            {
              "contract": "Swello",
              "label": "charityReceiver",
              "type": "t_address",
              "src": "contracts\\Swello.sol:188"
            },
            {
              "contract": "Swello",
              "label": "busdToken",
              "type": "t_address",
              "src": "contracts\\Swello.sol:189"
            },
            {
              "contract": "Swello",
              "label": "router",
              "type": "t_contract(IDEXRouter)1529",
              "src": "contracts\\Swello.sol:191"
            },
            {
              "contract": "Swello",
              "label": "pair",
              "type": "t_address",
              "src": "contracts\\Swello.sol:192"
            },
            {
              "contract": "Swello",
              "label": "pairBusd",
              "type": "t_address",
              "src": "contracts\\Swello.sol:193"
            },
            {
              "contract": "Swello",
              "label": "liquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:195"
            },
            {
              "contract": "Swello",
              "label": "treasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:196"
            },
            {
              "contract": "Swello",
              "label": "safetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:197"
            },
            {
              "contract": "Swello",
              "label": "sellFeeliquidityAdded",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:198"
            },
            {
              "contract": "Swello",
              "label": "totalBuyFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:199"
            },
            {
              "contract": "Swello",
              "label": "totalSellFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:200"
            },
            {
              "contract": "Swello",
              "label": "bonfireBalanceThresholds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:202"
            },
            {
              "contract": "Swello",
              "label": "bonfireFees",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts\\Swello.sol:203"
            },
            {
              "contract": "Swello",
              "label": "feeDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:205"
            },
            {
              "contract": "Swello",
              "label": "bonfireBurn",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:207"
            },
            {
              "contract": "Swello",
              "label": "bonfireTreasury",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:208"
            },
            {
              "contract": "Swello",
              "label": "bonfireCharity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:209"
            },
            {
              "contract": "Swello",
              "label": "bonfireDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:210"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidity",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:212"
            },
            {
              "contract": "Swello",
              "label": "targetLiquidityDenominator",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:213"
            },
            {
              "contract": "Swello",
              "label": "totalLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:215"
            },
            {
              "contract": "Swello",
              "label": "totalTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:216"
            },
            {
              "contract": "Swello",
              "label": "totalSafetyFundFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:217"
            },
            {
              "contract": "Swello",
              "label": "totalCharityFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:218"
            },
            {
              "contract": "Swello",
              "label": "totalBurnFee",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:219"
            },
            {
              "contract": "Swello",
              "label": "inSwap",
              "type": "t_bool",
              "src": "contracts\\Swello.sol:221"
            },
            {
              "contract": "Swello",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:235"
            },
            {
              "contract": "Swello",
              "label": "_gonsPerFragment",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:236"
            },
            {
              "contract": "Swello",
              "label": "gonSwapThreshold",
              "type": "t_uint256",
              "src": "contracts\\Swello.sol:237"
            },
            {
              "contract": "Swello",
              "label": "_gonBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\Swello.sol:239"
            },
            {
              "contract": "Swello",
              "label": "_allowedFragments",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\Swello.sol:240"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_contract(IDEXRouter)1529": {
              "label": "contract IDEXRouter"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\interface\\IUniswapV2Factory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)",
          "init_code_pair_hash()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "contracts\\libs\\UniswapV2Library.sol:10",
        "version": {
          "withMetadata": "cbb3c7c1d35a4b2aca127fe0c626512ad5be5f5684945091291515f60d2eee64",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapCallee": {
        "src": "contracts\\libs\\dexfactory.sol:95",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PancakeSwapCall(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:64",
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "contracts\\libs\\dexfactory.sol:550",
        "version": {
          "withMetadata": "b20b45d683cc97101be1d1e4c84feade312b82d32d12336926ad7a1b423d09c3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapERC20": {
        "src": "contracts\\libs\\dexfactory.sol:99",
        "version": {
          "withMetadata": "83be7419ce7c85c38ae782bd0a4c89857152f64843293304a48c6b191c3d9258",
          "withoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb",
          "linkedWithoutMetadata": "fa5f0cf7e707199594832a7df6958b39b73764e4340324e59eb7b65926a4f1cb"
        },
        "inherit": [
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapERC20",
            "src": "contracts\\libs\\dexfactory.sol:114"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_name",
            "src": "contracts\\libs\\dexfactory.sol:102"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_symbol",
            "src": "contracts\\libs\\dexfactory.sol:103"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\dexfactory.sol:104"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\libs\\dexfactory.sol:111"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:102"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\dexfactory.sol:103"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\dexfactory.sol:104"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:105"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:106"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\dexfactory.sol:107"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:109"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "contracts\\libs\\dexfactory.sol:111"
            },
            {
              "contract": "PancakeSwapERC20",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\dexfactory.sol:112"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapFactory": {
        "src": "contracts\\libs\\dexfactory.sol:464",
        "version": {
          "withMetadata": "4b8a97f6d3b90d042eac3fecd58d04ffeb45d8b878180c8d05ad959133bd9158",
          "withoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d",
          "linkedWithoutMetadata": "be6624f37d3313cd66d49a9214f21a3df5c84fb080d0bb9836e1dc0f1eaf598d"
        },
        "inherit": [
          "IPancakeSwapFactory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "getPair(address,address)",
          "allPairs()",
          "allPairsLength()",
          "feeTo()",
          "feeToSetter()",
          "init_code_pair_hash()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapFactory",
            "src": "contracts\\libs\\dexfactory.sol:475"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeTo",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:465"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_feeToSetter",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:466"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts\\libs\\dexfactory.sol:468"
            },
            {
              "contract": "PancakeSwapFactory",
              "label": "_allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts\\libs\\dexfactory.sol:469"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PancakeSwapPair": {
        "src": "contracts\\libs\\dexfactory.sol:230",
        "version": {
          "withMetadata": "253a9282f6ff70a478de65bc2c38cd1aa20527a11dd7354b1d8c92ee287e247b",
          "withoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57",
          "linkedWithoutMetadata": "a4244e03e6e601810a00943a9ccab94d0f54b051fd1133a06883c7db0c70fd57"
        },
        "inherit": [
          "PancakeSwapERC20",
          "IPancakeSwapPair",
          "IPancakeSwapERC20"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PancakeSwapPair",
            "src": "contracts\\libs\\dexfactory.sol:257"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "contracts\\libs\\dexfactory.sol:249"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PancakeSwapPair",
              "label": "_factory",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:237"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token0",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:238"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_token1",
              "type": "t_address",
              "src": "contracts\\libs\\dexfactory.sol:239"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve0",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:241"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_reserve1",
              "type": "t_uint112",
              "src": "contracts\\libs\\dexfactory.sol:242"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_blockTimestampLast",
              "type": "t_uint32",
              "src": "contracts\\libs\\dexfactory.sol:243"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price0CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:245"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_price1CumulativeLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:246"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "_kLast",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:247"
            },
            {
              "contract": "PancakeSwapPair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "contracts\\libs\\dexfactory.sol:249"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "contracts\\libs\\dexfactory.sol:575",
        "version": {
          "withMetadata": "b8906c3ed5da0e21dac11e79947d501bc1a812acfc2a4631bc5cd1aa2085ba12",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "59472dfb789c849fc33f3339106aad898cdd7cd9ffb4c86a6cf06ddbc33f90b3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IPancakeSwapFactory": {
        "src": "contracts\\libs\\IExchange.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapPair": {
        "src": "contracts\\libs\\IExchange.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPancakeSwapRouter": {
        "src": "contracts\\libs\\IExchange.sol:72",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\staking.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\staking.sol:22",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\staking.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SHARKBABYOKEN": {
        "src": "contracts\\libs\\sharkbaby.sol:230",
        "version": {
          "withMetadata": "70dca54bb24e6240cb2e59fd2def892212583af55d21c49a83d4a9cc17705195",
          "withoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621",
          "linkedWithoutMetadata": "4537950402fe863cc8e093dad75dc60e22132eed0f7b0eec8fb6d9e342018621"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)",
          "(address)",
          "setInitialAddresses(address)",
          "setFeeAddresses(address,address,address)",
          "setMaxTxAmount(uint256)",
          "setbuyFee(uint256,uint256,uint256,uint256)",
          "setsellFee(uint256,uint256,uint256,uint256)",
          "getTotalSellFee()",
          "getTotalBuyFee()",
          "excludeAddressFromFee(address,bool)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SHARKBABYOKEN",
            "src": "contracts\\libs\\sharkbaby.sol:390"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapAndLiquifyEnabled",
            "src": "contracts\\libs\\sharkbaby.sol:374"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_maxTxAmount",
            "src": "contracts\\libs\\sharkbaby.sol:383"
          },
          {
            "kind": "state-variable-assignment",
            "name": "numTokensSellToAddToLiquidity",
            "src": "contracts\\libs\\sharkbaby.sol:384"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SHARKBABYOKEN",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\sharkbaby.sol:244"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\sharkbaby.sol:246"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:248"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\sharkbaby.sol:249"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:250"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\sharkbaby.sol:251"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:358"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "gameAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:359"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "poolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:360"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "babyPoolAddress",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:361"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\sharkbaby.sol:364"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "PancakeSwapV2Pair",
              "type": "t_address",
              "src": "contracts\\libs\\sharkbaby.sol:365"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "inSwapAndLiquify",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:367"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "swapAndLiquifyEnabled",
              "type": "t_bool",
              "src": "contracts\\libs\\sharkbaby.sol:374"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "sellFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:377"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "buyFees",
              "type": "t_struct(Fees)1474_storage",
              "src": "contracts\\libs\\sharkbaby.sol:378"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "isExcludeFromFee",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\libs\\sharkbaby.sol:380"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "_maxTxAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:383"
            },
            {
              "contract": "SHARKBABYOKEN",
              "label": "numTokensSellToAddToLiquidity",
              "type": "t_uint256",
              "src": "contracts\\libs\\sharkbaby.sol:384"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Fees)1474_storage": {
              "label": "struct SHARKBABYOKEN.Fees",
              "members": [
                {
                  "label": "marketing",
                  "type": "t_uint256"
                },
                {
                  "label": "gameWallet",
                  "type": "t_uint256"
                },
                {
                  "label": "liquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "poolfee",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\staking.sol:87",
        "version": {
          "withMetadata": "17e66e7485cd78c44760d7bddc1485a14af88e0b586a406c74f9b5f3991196cc",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\libs\\staking.sol:106",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "burn(uint256)",
          "transferFrom(address,address,uint256)",
          "mint(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Staking": {
        "src": "contracts\\libs\\staking.sol:145",
        "version": {
          "withMetadata": "e27a1410e183f57e6cb9e4105b9aaebed31d50dbec87451cb87edfc6e187f356",
          "withoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec",
          "linkedWithoutMetadata": "5f33608ab074d5678ce4be955f7e576998469d6c851168983a43788a4a6a08ec"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "countTotalStake()",
          "countTotalReward()",
          "APY()",
          "getStakeInfo(address)",
          "countStake(address)",
          "countReward(address)",
          "countFee(address)",
          "checkReward(address)",
          "stake(uint256,address)",
          "unstaking()",
          "claimRewards()",
          "setInitialAddresses(address,address)",
          "getRewardableAmount()",
          "swapTokenForReward()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Staking",
            "src": "contracts\\libs\\staking.sol:177"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_1",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:161"
            },
            {
              "contract": "Staking",
              "label": "rewardTokenAddress_2",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:162"
            },
            {
              "contract": "Staking",
              "label": "stakeTokenAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:163"
            },
            {
              "contract": "Staking",
              "label": "marketingAddress",
              "type": "t_address",
              "src": "contracts\\libs\\staking.sol:165"
            },
            {
              "contract": "Staking",
              "label": "totalStakingAmount",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:167"
            },
            {
              "contract": "Staking",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:168"
            },
            {
              "contract": "Staking",
              "label": "totalStake",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:169"
            },
            {
              "contract": "Staking",
              "label": "stakerNum",
              "type": "t_uint256",
              "src": "contracts\\libs\\staking.sol:171"
            },
            {
              "contract": "Staking",
              "label": "PancakeSwapRouter",
              "type": "t_contract(IPancakeSwapRouter)690",
              "src": "contracts\\libs\\staking.sol:173"
            },
            {
              "contract": "Staking",
              "label": "stakers",
              "type": "t_mapping(t_address,t_struct(Staker)2780_storage)",
              "src": "contracts\\libs\\staking.sol:175"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPancakeSwapRouter)690": {
              "label": "contract IPancakeSwapRouter"
            },
            "t_mapping(t_address,t_struct(Staker)2780_storage)": {
              "label": "mapping(address => struct Staking.Staker)"
            },
            "t_struct(Staker)2780_storage": {
              "label": "struct Staking.Staker",
              "members": [
                {
                  "label": "referal",
                  "type": "t_uint256"
                },
                {
                  "label": "stakingAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "lastStakeUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "stake",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_1",
                  "type": "t_uint256"
                },
                {
                  "label": "rewards_2",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\libs\\ERC20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\libs\\ERC20.sol:156",
        "version": {
          "withMetadata": "8a4a3169fd22d8a2f2e3701cd189bd4656d9f773df1f8c62a233f11ac5eaa6e0",
          "withoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13",
          "linkedWithoutMetadata": "302668e259f28bb549a4ea14fc818ee493e1db0758e65833c55d7ca029c0eb13"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(string,string)",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\libs\\ERC20.sol:173"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_totalSupply",
            "src": "contracts\\libs\\ERC20.sol:168"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_decimals",
            "src": "contracts\\libs\\ERC20.sol:169"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\ERC20.sol:164"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\ERC20.sol:166"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\ERC20.sol:168"
            },
            {
              "contract": "ERC20",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\ERC20.sol:169"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:170"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\ERC20.sol:171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\ERC20.sol:20",
        "version": {
          "withMetadata": "5c57f36085cfaf6ea69a729eccd7cc60139672d2ec400f2454aafa87a6921e67",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "BEP20Token": {
        "src": "contracts\\libs\\BUSD.sol:334",
        "version": {
          "withMetadata": "d82b327f101c18bbd846be06e448abbee783f5e712c8fc5c680626e200be9bd8",
          "withoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69",
          "linkedWithoutMetadata": "d2c44b071757ba77a868a80932ab27af2bea2fd668a0647f5c8bf217ecf2fd69"
        },
        "inherit": [
          "Ownable",
          "IBEP20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "getOwner()",
          "decimals()",
          "symbol()",
          "name()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)",
          "mint(uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20Token",
            "src": "contracts\\libs\\BUSD.sol:346"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "BEP20Token",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\libs\\BUSD.sol:337"
            },
            {
              "contract": "BEP20Token",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\libs\\BUSD.sol:339"
            },
            {
              "contract": "BEP20Token",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\libs\\BUSD.sol:341"
            },
            {
              "contract": "BEP20Token",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts\\libs\\BUSD.sol:342"
            },
            {
              "contract": "BEP20Token",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:343"
            },
            {
              "contract": "BEP20Token",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\libs\\BUSD.sol:344"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts\\libs\\BUSD.sol:99",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IBEP20": {
        "src": "contracts\\libs\\BUSD.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\libs\\BUSD.sol:275",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\libs\\BUSD.sol:283"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\libs\\BUSD.sol:276"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\libs\\BUSD.sol:127",
        "version": {
          "withMetadata": "3c5e02633a503a0ac8ce2c0f6609917389e7117ad0b8de48d1f2e3c6b86da21f",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}